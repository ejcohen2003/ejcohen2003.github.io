[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/maryland_football_ypp/index.html",
    "href": "posts/maryland_football_ypp/index.html",
    "title": "Maryland Ypp",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n#install.packages(\"ggrepel\")\nlibrary(ggrepel)\n\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\n\nMaryland football’s Michael Locksley and Taulia Tagovailoa-led offense typically comes to mind when thinking about its rise from the bottom of the Big Ten — but their defense has been just as crucial since Locksley took the helm in 2019.\nThe Terps’ defense outperformed their offense in two of the last three years, a span where they won three consecutive bowl games for the first time in program history. Maryland’s defense led the way in both 2022 and 2023, where it reached eight wins in consecutive seasons for the first time in over 20 years.\n\n\nCode\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1124.csv\")\n\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nwinlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\n\n\nCode\nwinlosslogs |&gt; \n  group_by(Team, Conference, Season) |&gt; \n  summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins),\n    TotalGames = n()) |&gt;\n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays,\n    WinPct=TotalWins/TotalGames) -&gt; ypp\n\n\n`summarise()` has grouped output by 'Team', 'Conference'. You can override\nusing the `.groups` argument.\n\n\n\n\nCode\nmaryland &lt;- ypp |&gt; filter(Team == \"Maryland\")\n\n\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=WinPct), \n    color=\"grey\", \n    alpha=.5) + \n  geom_point(\n    data=maryland, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=WinPct), \n    color=\"red\") + \n  geom_vline(xintercept = 5.740424) + \n  geom_hline(yintercept = 5.609849) +\n  geom_text_repel(\n    data=maryland, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=Season)\n  ) +\n  labs(title=\"Balance keeps Maryland out of the Big Ten's basement\", subtitle=\"The Terps offense has grabbed headlines, but the defense holds their own.\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\n\n\n\n\nMaryland football’s Michael Locksley and Taulia Tagovailoa-led offense typically comes to mind when thinking about its rise from the bottom of the Big Ten — but their defense has been just as crucial since Locksley took the helm in 2019.\nThe Terps’ defense outperformed their offense in two of the last three years, a span where they won three consecutive bowl games for the first time in program history. Maryland’s defense led the way in both 2022 and 2023, where it reached eight wins in consecutive seasons for the first time in over 20 years."
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Third and Six",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n#install.packages(\"cfbfastR\")\nlibrary(cfbfastR)\n\n\n\n\nCode\n#pbp &lt;- load_cfb_pbp(\n#  seasons = 2015:2024,\n#  dbConnection = NULL,\n#  tablename = NULL\n#)\n\n\n\n\nCode\n#third_and_six &lt;- pbp |&gt; filter(c(down == \"3\", distance == \"6\"))"
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "blog",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nauthor: \"Eli Cohen\"\ndate: '2024-10-08'\nformat: \n  html:\n    code-fold: true\n\nLoading the data:\n\ndata_23 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ndata_24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nClustering the Big Ten and creating new data sets that show the average offensive plays for every team in the conference.\n\nbig10 &lt;- c(\"Nebraska Cornhuskers\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Illinois Fighting Illini\", \"Northwestern Wildcats\", \"Wisconsin Badgers\", \"Indiana Hoosiers\", \"Purdue Boilermakers\", \"Ohio State Buckeyes\", \"Michigan Wolverines\", \"Michigan State Spartans\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\", \"Maryland Terrapins\")\n\n\nb1g_23 &lt;- data_23 |&gt;\n  filter(TeamFull %in% big10) |&gt;\n  group_by(TeamFull) |&gt;\n   summarize(avg_plays=mean(OffensivePlays)) |&gt;\n  select(TeamFull, avg_plays)\n\n\nb1g_24 &lt;- data_24 |&gt;\n  filter(TeamFull %in% big10) |&gt;\n  group_by(TeamFull) |&gt;\n  summarize(avg_plays=mean(OffensivePlays)) |&gt;\n  select(TeamFull, avg_plays)\n\nCreating the graphs:\n\nggplot() + \n  geom_bar(\n    data=b1g_23, \n    aes(x=reorder(TeamFull, avg_plays), weight=avg_plays)\n  ) +\n  coord_flip()+\n   labs(\n    title=\"2023 Big Ten ofensive plays per game prior to rule change\", \n    x=\"School\", \n    y=\"Average Plays\")\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_bar(\n    data=b1g_24, \n    aes(x=reorder(TeamFull, avg_plays), weight=avg_plays)\n  ) +\n  coord_flip()+\n   labs(\n    title=\"Average plays remained similar in 2024 despite rule change\", \n    x=\"School\", \n    y=\"Average Plays\"\n)\n\n\n\n\n\n\n\n\nMaryland took a jump and has averaged the most offensive plays in the Big Ten so far this season — which I assume is in large part to the defense’s ability to force turnovers — but the overall trend among the Big Ten teams from 2023 and 2024 (just looking at the ones who were in the conference last year) is just that the average plays has remained similar.\n\nLast year each team averaged somewhere between 60 plays and a number in the low 70s. While a flat-out atrocious Purdue team fell out of that range, all 13 others are still there."
  },
  {
    "objectID": "posts/volleyball_aces/index.html",
    "href": "posts/volleyball_aces/index.html",
    "title": "Volleyball Aces",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages(library(tidyverse))\nlibrary(janitor)\n\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nCode\n#install.packages(\"ggbeeswarm\")\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\n\n\nWarning: package 'ggrepel' was built under R version 4.3.3\n\n\n\n\nCode\nset.seed(1234)\n\n\n\n\nCode\ndata &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\") |&gt; clean_names() \n\n\nRows: 5174 Columns: 36\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (7): team, full_name, roster_name, last_name, first_name, yr, pos\ndbl (26): ncaa_id, season, jersey, feet, inches, gp, gs, mp, s, kills, error...\nlgl  (3): ms, total_blocks, tb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nfiltered_data &lt;- data |&gt;\nfilter(gp&gt;=20, !is.na(aces), !is.na(pos)) |&gt;\nmutate(aces_per_match= aces/gp)\n\ntop_aces &lt;- filtered_data |&gt;\nfilter(aces_per_match&gt;=0.8529)\n\numd &lt;- top_aces |&gt; \n  filter(team == \"Maryland Terrapins, Terps\") |&gt; \n  filter(aces_per_match&gt;=0.8529) |&gt; \n  arrange(desc(aces_per_match))\n\n\n\n\nCode\nggplot() + \n  geom_quasirandom(\n    data=top_aces, \n    groupOnX=TRUE, \n    aes(x=pos, y=aces_per_match), color=\"grey\") + \n  geom_quasirandom(\n    data=umd, \n    groupOnX=TRUE, \n    aes(x=pos, y=aces_per_match), color=\"red\") +\n  geom_text_repel(\n    data=umd, \n    aes(x=pos, y=aces_per_match, label=roster_name)) +\n labs(\n    title=\"Maryland volleyball lacked a top serving threat in 2023\", \n    subtitle = \"The Terps were near the middle of the Big Ten in aces, but did so by committee\",\n    x=\"Position\", \n    y=\"Aces Per Match\") + \n  theme_minimal() \n\n\n\n\n\n\n\n\n\nMaryland volleyball has far worse deficiencies than service aces, but didn’t have any singular standout in that category. None of the Terps’ three-player committee — Sam Csire, Erin Engal and Lilly Gunter — have separated themselves from the pack. Likewise, Maryland has struggled to separate itself from the middle and bottom of its conference.\n\n\nCode\nsummary(filtered_data$aces_per_match)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.1200  0.5172  0.5460  0.8529  2.3448 \n\n\n\n\nCode\nggplot() + geom_beeswarm(data=top_aces, aes(x=pos, y=aces_per_match), color=\"grey\")"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/test/index.html",
    "href": "posts/test/index.html",
    "title": "First post!",
    "section": "",
    "text": "This is my first post to this site. Here’s some pseudo-code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlogs &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs1123.csv\")\n\n\nRows: 20666 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/volleyball-waffle/index.html",
    "href": "posts/volleyball-waffle/index.html",
    "title": "Volleyball!",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n#install.packages(\"waffle\")\nlibrary(waffle)\n\n\n\n\nCode\nmatches_2024 &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5867 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nmd &lt;- matches_2024 |&gt;\n  filter(team == \"Maryland\") |&gt;\n  group_by(team)|&gt;\n  summarize(total_kills=sum(kills),\n            total_blocks=sum(block_assists)+sum(block_solos),\n            total_aces=sum(aces),\n            total_opp_err=sum(defensive_errors)\n)\n\n\n\n\nCode\nnebraska &lt;- matches_2024 |&gt;\n  filter(team == \"Nebraska\") |&gt;\n  group_by(team)|&gt;\n  summarize(total_kills=sum(kills),\n            total_blocks=sum(block_assists)+sum(block_solos),\n            total_aces=sum(aces),\n            total_opp_err=sum(defensive_errors)\n)\n\n\n\n\nCode\nmd &lt;- c(\"Kills\"=714, \"Blocks\"=253, \"Aces\"=127, \"Opponent Errors\"=323)\nnb &lt;- c(\"Kills\"=701, \"Blocks\"=254, \"Aces\"=71, \"Opponent Errors\"=283, 108)\n\n\n\n\nCode\niron(\n waffle(md/5, \n        rows = 5, \n        title=\"Maryland volleyball is racking up aces\", \n        xlab=\"1 square = 5 times for each stat\", \n        colors = c(\"red\", \"black\", \"grey\", \"gold\")\n        ),\n waffle(nb/5, \n        rows = 5, \n        title=\"Nebraska? not so much\", \n        xlab=\"1 square = 5 times for each stat\",\n        colors = c(\"red\", \"black\", \"grey\",\"gold\", \"white\")\n        )\n)\n\n\n\n\n\n\n\n\n\nThe largest discrepancy between Maryland and Nebraska volleyball is that Maryland is out-acing Nebraska by a very wide margin. However, we know that Nebraska has been a far better team than the Terps — something these numbers don’t necessarily indicate. Perhaps that’s because per set stats would be more representative of success than totals, or maybe these stats just aren’t that important. Nonetheless, Maryland can celebrate out-acing the powerhouse Cornhuskers and having comparable numbers across the board. That is until the teams actually face off on the court on Nov. 30 — and it’s unlikely there will be much to celebrate then.\nTESTING UPDATE"
  },
  {
    "objectID": "posts/close_rushing_wins/index.html",
    "href": "posts/close_rushing_wins/index.html",
    "title": "Close Rushing Wins",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1124.csv\")\n\n\nRows: 21592 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\n winlosslogs &lt;- logs |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n  )\n\n\n\n\nCode\nsmall_rushing_wins &lt;- winlosslogs |&gt;\nfilter(RushingYds&lt;=100 & wins == 1)\n\nsmall_rushing &lt;- winlosslogs |&gt;\n  filter(RushingYds&lt;=100)\n\n\n\n\nCode\ndata &lt;- (small_rushing) |&gt; group_by(Season,Conference) |&gt; summarize(Games = n(), Wins=sum(wins), Win_pct=Wins/Games) |&gt;\nfilter(Season&gt;=\"2015\")\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\nBigTen &lt;- data |&gt; filter(Conference == \"Big Ten Conference\")\nSEC &lt;- data |&gt; filter(Conference ==\"Southeastern Conference\")\nCUSA &lt;- data |&gt; filter(Conference ==\"Conference USA\")\nBig12 &lt;- data |&gt; filter(Conference ==\"Big 12 Conference\")\nInd &lt;- data |&gt; filter(Conference ==\"Independent\")\nMAC &lt;- data |&gt; filter(Conference ==\"Mid-American Conference\")\nPAC12 &lt;- data |&gt; filter(Conference ==\"Pac-12 Conference\"| Conference == \"Pacific-12 Conference\")\nBigEast &lt;- data |&gt; filter(Conference ==\"Big East Conference\")\nSunBelt &lt;- data |&gt; filter(Conference ==\"Sun Belt Conference\")\nMWC &lt;- data |&gt; filter(Conference ==\"Mountain West Conference\")\nWAC &lt;- data |&gt; filter(Conference ==\"Western Athletic Conference\")\nACC &lt;- data |&gt; filter(Conference == \"Atlantic Coast Conference\")\n\n\n\n\nCode\nggplot() +\n geom_line(data = BigTen, aes(x = Season, y = Win_pct, color = \"Big Ten\")) +\n  geom_point(data = BigTen, aes(x = Season, y = Win_pct, color = \"Big Ten\")) +\n  geom_line(data = SEC, aes(x = Season, y = Win_pct, color = \"SEC\")) +\n  geom_point(data = SEC, aes(x = Season, y = Win_pct, color = \"SEC\")) +\n  geom_line(data = Big12, aes(x = Season, y = Win_pct, color = \"Big 12\")) +\n  geom_point(data = Big12, aes(x = Season, y = Win_pct, color = \"Big 12\")) +\n  scale_x_continuous(breaks = seq(2015, 2024, by = 3))+\n\n  scale_color_manual(values = c(\"Big Ten\" = \"black\", \n                                 \"SEC\" = \"maroon\", \n                                 \"Big 12\" = \"navy\")) +\n  labs(color = \"Conference\",\n       title = \"No run game? No problem.\",\n       caption = \"The likelihood of winning a game without a strong run game has increased in the last decade. \",\n       y = \"Winning percentage\",\n       subtitle = \"Team performance when rushing for less than 100 yards.\") +\n  theme_minimal() \n\n\n\n\n\n\n\n\n\nOnce again, it looks like the “run the damn ball” guy is wrong again aside from an outlier from the Big 12 in 2022. It reinforces the idea that quarterback play is king, and shows why most of the money goes to whoever’s under center. Even in the Big Ten — which was dominated by a Jim Harbaugh-led Michigan team that ran it as well as anyone in the country — a bad game running the ball has became increasingly-less important in recent years."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Running on empty\n\n\n\n\n\n\n\n\n\n\n\nNov 5, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n\n\n\n\n\n\nVolleyball Aces\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n\n\n\n\n\n\nClose Rushing Wins\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland Ypp\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n\n\n\n\n\n\nVolleyball!\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n\n\n\n\n\n\nThird and Six\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nFirst post!\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 30, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/running_on_empty/index.html",
    "href": "posts/running_on_empty/index.html",
    "title": "Running on empty",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(lubridate)\n\n\n\n\nCode\nlogs &lt;- read_csv(\"https://www.thescoop.org/sports-data-files/footballlogs24.csv\")\n\n\nRows: 1136 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nlogs &lt;- logs |&gt;\n  mutate(month = month(Date))\n\n\n\n\nCode\nbig_10 &lt;- logs |&gt;\n  filter(Conference == \"Big Ten Conference\")\n\n\n\n\nCode\nbig_10 |&gt; summarise(mean(RushingYds))\n\n\n# A tibble: 1 × 1\n  `mean(RushingYds)`\n               &lt;dbl&gt;\n1               151.\n\n\n\n\nCode\nggplot() + \n  geom_line(data=big_10, aes(x=Game, y=RushingYds, group=Team, color=Team)) + \n  facet_wrap(~Team) +\n  scale_x_continuous(breaks = seq(min(big_10$Game), max(big_10$Game), by = 2)) +\n  scale_color_manual(values = c(\"Maryland\" = \"red\"))+\n  geom_hline(yintercept=151.359, color=\"blue\") \n\n\n\n\n\n\n\n\n\nMaryland football wasn’t expected to be a force in the run game entering the 2024 season — but with it returning an all-conference runningback in Roman Hemby, it seems fair to have expected competence at the very least. But that hasn’t been the case, as the Terps’ abysmal run game is yet another reason for their disappointment this season.\nCoach Michael Locksley’s team has only surpassed the Big Ten rushing average in two of its eight games this year. That’s the second-worst mark in the 18-team league, trailing only UCLA. Those two games both came against FCS opponents UConn and Villanova.\n\n\nCode\navg_b10 &lt;- big_10 |&gt;\n  group_by(Team)|&gt;\n  summarise(avg_rush_yd = mean(RushingYds))\nprint(avg_b10) |&gt;\narrange(desc(avg_rush_yd))\n\n\n# A tibble: 18 × 2\n   Team           avg_rush_yd\n   &lt;chr&gt;                &lt;dbl&gt;\n 1 Illinois             142. \n 2 Indiana              192. \n 3 Iowa                 222. \n 4 Maryland             119  \n 5 Michigan             165. \n 6 Michigan State       118. \n 7 Minnesota            112. \n 8 Nebraska             125. \n 9 Northwestern         112. \n10 Ohio State           186. \n11 Oregon               168. \n12 Penn State           188. \n13 Purdue               149  \n14 Rutgers              182. \n15 UCLA                  73.9\n16 USC                  147. \n17 Washington           148. \n18 Wisconsin            174. \n\n\n# A tibble: 18 × 2\n   Team           avg_rush_yd\n   &lt;chr&gt;                &lt;dbl&gt;\n 1 Iowa                 222. \n 2 Indiana              192. \n 3 Penn State           188. \n 4 Ohio State           186. \n 5 Rutgers              182. \n 6 Wisconsin            174. \n 7 Oregon               168. \n 8 Michigan             165. \n 9 Purdue               149  \n10 Washington           148. \n11 USC                  147. \n12 Illinois             142. \n13 Nebraska             125. \n14 Maryland             119  \n15 Michigan State       118. \n16 Minnesota            112. \n17 Northwestern         112. \n18 UCLA                  73.9\n\n\n\n\nCode\nmed_b10 &lt;- big_10 |&gt;\n  group_by(Team)|&gt;\n  summarise(med_rush_yd = median(RushingYds))\nprint(med_b10) |&gt;\narrange(desc(med_rush_yd))\n\n\n# A tibble: 18 × 2\n   Team           med_rush_yd\n   &lt;chr&gt;                &lt;dbl&gt;\n 1 Illinois              137 \n 2 Indiana               188 \n 3 Iowa                  220 \n 4 Maryland              108 \n 5 Michigan              148 \n 6 Michigan State        127 \n 7 Minnesota             116 \n 8 Nebraska              121 \n 9 Northwestern          122 \n10 Ohio State            180.\n11 Oregon                155 \n12 Penn State            198.\n13 Purdue                154.\n14 Rutgers               160.\n15 UCLA                   82 \n16 USC                   161 \n17 Washington            127 \n18 Wisconsin             171 \n\n\n# A tibble: 18 × 2\n   Team           med_rush_yd\n   &lt;chr&gt;                &lt;dbl&gt;\n 1 Iowa                  220 \n 2 Penn State            198.\n 3 Indiana               188 \n 4 Ohio State            180.\n 5 Wisconsin             171 \n 6 USC                   161 \n 7 Rutgers               160.\n 8 Oregon                155 \n 9 Purdue                154.\n10 Michigan              148 \n11 Illinois              137 \n12 Michigan State        127 \n13 Washington            127 \n14 Northwestern          122 \n15 Nebraska              121 \n16 Minnesota             116 \n17 Maryland              108 \n18 UCLA                   82"
  }
]