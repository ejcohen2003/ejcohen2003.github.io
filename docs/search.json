[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "blog",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nauthor: \"Eli Cohen\"\ndate: '2024-10-08'\nformat: \n  html:\n    code-fold: true\n\nLoading the data:\n\ndata_23 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\")\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ndata_24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nClustering the Big Ten and creating new data sets that show the average offensive plays for every team in the conference.\n\nbig10 &lt;- c(\"Nebraska Cornhuskers\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Illinois Fighting Illini\", \"Northwestern Wildcats\", \"Wisconsin Badgers\", \"Indiana Hoosiers\", \"Purdue Boilermakers\", \"Ohio State Buckeyes\", \"Michigan Wolverines\", \"Michigan State Spartans\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\", \"Maryland Terrapins\")\n\n\nb1g_23 &lt;- data_23 |&gt;\n  filter(TeamFull %in% big10) |&gt;\n  group_by(TeamFull) |&gt;\n   summarize(avg_plays=mean(OffensivePlays)) |&gt;\n  select(TeamFull, avg_plays)\n\n\nb1g_24 &lt;- data_24 |&gt;\n  filter(TeamFull %in% big10) |&gt;\n  group_by(TeamFull) |&gt;\n  summarize(avg_plays=mean(OffensivePlays)) |&gt;\n  select(TeamFull, avg_plays)\n\nCreating the graphs:\n\nggplot() + \n  geom_bar(\n    data=b1g_23, \n    aes(x=reorder(TeamFull, avg_plays), weight=avg_plays)\n  ) +\n  coord_flip()+\n   labs(\n    title=\"2023 Big Ten ofensive plays per game prior to rule change\", \n    x=\"School\", \n    y=\"Average Plays\")\n\n\n\n\n\nggplot() + \n  geom_bar(\n    data=b1g_24, \n    aes(x=reorder(TeamFull, avg_plays), weight=avg_plays)\n  ) +\n  coord_flip()+\n   labs(\n    title=\"Average plays remained similar in 2024 despite rule change\", \n    x=\"School\", \n    y=\"Average Plays\"\n)\n\n\n\n\nMaryland took a jump and has averaged the most offensive plays in the Big Ten so far this season — which I assume is in large part to the defense’s ability to force turnovers — but the overall trend among the Big Ten teams from 2023 and 2024 (just looking at the ones who were in the conference last year) is just that the average plays has remained similar.\n\nLast year each team averaged somewhere between 60 plays and a number in the low 70s. While a flat-out atrocious Purdue team fell out of that range, all 13 others are still there."
  },
  {
    "objectID": "posts/test/index.html",
    "href": "posts/test/index.html",
    "title": "First post!",
    "section": "",
    "text": "This is my first post to this site. Here’s some pseudo-code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlogs &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs1123.csv\")\n\n\nRows: 20666 Columns: 55\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (46): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Volleyball!\n\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nFirst post!\n\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nEli Cohen\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/volleyball-waffle/index.html",
    "href": "posts/volleyball-waffle/index.html",
    "title": "Volleyball!",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n#install.packages(\"waffle\")\nlibrary(waffle)\n\n\n\n\nCode\nmatches_2024 &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5867 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nmd &lt;- matches_2024 |&gt;\n  filter(team == \"Maryland\") |&gt;\n  group_by(team)|&gt;\n  summarize(total_kills=sum(kills),\n            total_blocks=sum(block_assists)+sum(block_solos),\n            total_aces=sum(aces),\n            total_opp_err=sum(defensive_errors)\n)\n\n\n\n\nCode\nnebraska &lt;- matches_2024 |&gt;\n  filter(team == \"Nebraska\") |&gt;\n  group_by(team)|&gt;\n  summarize(total_kills=sum(kills),\n            total_blocks=sum(block_assists)+sum(block_solos),\n            total_aces=sum(aces),\n            total_opp_err=sum(defensive_errors)\n)\n\n\n\n\nCode\nmd &lt;- c(\"Kills\"=714, \"Blocks\"=253, \"Aces\"=127, \"Opponent Errors\"=323)\nnb &lt;- c(\"Kills\"=701, \"Blocks\"=254, \"Aces\"=71, \"Opponent Errors\"=283, 108)\n\n\n\n\nCode\niron(\n waffle(md/5, \n        rows = 5, \n        title=\"Maryland volleyball is racking up aces\", \n        xlab=\"1 square = 5 times for each stat\", \n        colors = c(\"red\", \"black\", \"grey\", \"gold\")\n        ),\n waffle(nb/5, \n        rows = 5, \n        title=\"Nebraska? not so much\", \n        xlab=\"1 square = 5 times for each stat\",\n        colors = c(\"red\", \"black\", \"grey\",\"gold\", \"white\")\n        )\n)\n\n\n\n\n\nThe largest discrepancy between Maryland and Nebraska volleyball is that Maryland is out-acing Nebraska by a very wide margin. However, we know that Nebraska has been a far better team than the Terps — something these numbers don’t necessarily indicate. Perhaps that’s because per set stats would be more representative of success than totals, or maybe these stats just aren’t that important. Nonetheless, Maryland can celebrate out-acing the powerhouse Cornhuskers and having comparable numbers across the board. That is until the teams actually face off on the court on Nov. 30 — and it’s unlikely there will be much to celebrate then.\nTESTING UPDATE"
  }
]